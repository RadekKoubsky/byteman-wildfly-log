HELPER org.jboss.byteman.koubsky.LogHelper

#Logging of undertow handlers chain
RULE logServletHandler.handleRequest
CLASS io.undertow.servlet.handlers.ServletHandler
METHOD handleRequest(HttpServerExchange)
AT ENTRY
IF true
DO log($CLASS, "DEBUG", "(Method handleRequest) Request info: " + 
		" URL = " + $1.getRequestURL() + ", protocol = " + $1.getProtocol() + 
		", method = " + $1.getRequestMethod() + ", query string: " + $1.getQueryString())
ENDRULE

#Log cookies - does not work with JBoss Modules plugin
#RULE logServletHandler.handleRequest.cookies
#CLASS io.undertow.servlet.handlers.ServletHandler
#METHOD handleRequest(HttpServerExchange)
#HELPER org.jboss.byteman.koubsky.servlets.ServletHandlerLog
#IMPORT io.undertow.core
#AT ENTRY
#IF true
#DO logCookie($CLASS, $1)
#ENDRULE

RULE logServletSecurityRoleHandler.handleRequest.canAccess
CLASS io.undertow.servlet.handlers.security.ServletSecurityRoleHandler
METHOD handleRequest(HttpServerExchange)
AT INVOKE io.undertow.server.HttpHandler.handleRequest(HttpServerExchange) 1
IF true
DO log($CLASS, "DEBUG", "(Method handleRequest) User can access a given resource, continuing in handlers chain to ServletHandler.")
ENDRULE

RULE logServletSecurityRoleHandler.handleRequest.SC_FORBIDDEN
CLASS io.undertow.servlet.handlers.security.ServletSecurityRoleHandler
METHOD handleRequest(HttpServerExchange)
AT INVOKE javax.servlet.http.HttpServletResponse.sendError(int) 1
IF true
DO log($CLASS, "DEBUG", "(Method handleRequest) User cannot access a given resource, " + 
			"sending an error response to the client with status SC_FORBIDDEN(403).")
ENDRULE

RULE logServletDispatchingHandler.handleRequest
CLASS io.undertow.servlet.handlers.ServletDispatchingHandler
METHOD handleRequest(HttpServerExchange)
AT ENTRY
IF true
DO log($CLASS, "DEBUG", "(Method handleRequest) Dispatching to the resolved servlet: " + $1.getRelativePath())
ENDRULE

RULE logSecurityContextAssociationHandler.handleRequest
CLASS org.wildfly.extension.undertow.security.SecurityContextAssociationHandler
METHOD handleRequest(HttpServerExchange)
AT INVOKE io.undertow.server.HttpHandler.handleRequest(HttpServerExchange) 1
BIND scString = $sc == null ? "null" : "Security domain = " + $sc.getSecurityDomain() + ", Subject info: " + $sc.getSubjectInfo() + 
				", context map = " + $sc.getData() + ", incomingRunAs = " + $sc.getIncomingRunAs() + ", outgoingRunAs = " + $sc.getOutgoingRunAs();
IF true
DO log($CLASS, "DEBUG", "(Method handleRequest) Trying to set RunAsIdentity: \n RunAsIdentity = " + $runAsIdentity
		+ "; \n SecurityContext: " + scString)
ENDRULE

RULE logPredicateHandler.handleRequest
CLASS io.undertow.server.handlers.PredicateHandler
METHOD handleRequest(HttpServerExchange)
AT INVOKE io.undertow.server.HttpHandler.handleRequest(HttpServerExchange) 1
IF true
DO log($CLASS, "DEBUG", "(Method handleRequest) Resolving predicates for request in HttpServerExchange. \n TrueHandler = " + $0.trueHandler
		+ " \n FalseHandler = " + $0.falseHandler + " \n Resulted handler: " + $next)
ENDRULE

RULE logSSLInformationAssociationHandler.handleRequest.addSSLAttributes
CLASS io.undertow.servlet.handlers.security.SSLInformationAssociationHandler
METHOD handleRequest(HttpServerExchange)
AFTER INVOKE javax.servlet.ServletRequest.setAttribute(String, Object) 3
IF true
DO log($CLASS, "DEBUG", "(Method handleRequest) Adding SSL attributes to request: \n" 
		+ "javax.servlet.request.cipher_suite = " + $request.getAttribute("javax.servlet.request.cipher_suite")
		+ "javax.servlet.request.key_size = " + $request.getAttribute("javax.servlet.request.key_size")
		+ "javax.servlet.request.ssl_session_id = " + $request.getAttribute("javax.servlet.request.ssl_session_id")
		)
ENDRULE

RULE logSSLInformationAssociationHandler.handleRequest.addCertificatesAttribute
CLASS io.undertow.servlet.handlers.security.SSLInformationAssociationHandler
METHOD handleRequest(HttpServerExchange)
AFTER INVOKE javax.servlet.ServletRequest.setAttribute(String, Object) 4
IF true
DO log($CLASS, "DEBUG", "(Method handleRequest) Adding X509 certificates to request: \n" 
		+ "javax.servlet.request.X509Certificate = " + $certs
		)
ENDRULE

RULE logSSLInformationAssociationHandler.handleRequest.NoSSL
CLASS io.undertow.servlet.handlers.security.SSLInformationAssociationHandler
METHOD handleRequest(HttpServerExchange)
AT INVOKE io.undertow.server.HttpHandler.handleRequest(HttpServerExchange) 1
IF $ssl == null
DO log($CLASS, "DEBUG", "(Method handleRequest) SSLSessionInfo is null, SSL attributes and X509 certificates are not added to request.")
ENDRULE

RULE logServletAuthenticationCallHandler.handleRequest.next
CLASS io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler
METHOD handleRequest(HttpServerExchange)
AT INVOKE io.undertow.server.HttpHandler.handleRequest(HttpServerExchange) 1
IF true
DO log($CLASS, "DEBUG", "(Method handleRequest) Request is successfully authenticated and exchange is not completed, continuing in handlers chain.")
ENDRULE

RULE logServletAuthenticationCallHandler.handleRequest.dispatch
CLASS io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler
METHOD handleRequest(HttpServerExchange)
AT INVOKE io.undertow.server.HttpServerExchange.dispatch(HttpHandler) 1
IF true
DO log($CLASS, "DEBUG", "(Method handleRequest) Request is running in the IO thread, dispatching request to the given executor.")
ENDRULE

RULE logServletAuthenticationCallHandler.handleRequest.sendError
CLASS io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler
METHOD handleRequest(HttpServerExchange)
AT INVOKE io.undertow.servlet.spec.HttpServletResponseImpl.sendError(int) 1
IF true
DO log($CLASS, "DEBUG", "(Method handleRequest) Response code >= 400 and exchange is not completed, " + 
						"sending an error response to the client using the specified status code and clearing the buffer.")
ENDRULE

RULE logAbstractConfidentialityHandler.handleRequest.next
CLASS io.undertow.security.handlers.AbstractConfidentialityHandler
METHOD handleRequest(HttpServerExchange)
AT INVOKE io.undertow.server.HttpHandler.handleRequest(HttpServerExchange) 1
IF true
DO log($CLASS, "DEBUG", "(Method handleRequest) Request is already 'sufficiently' confidential, continuing in handlers chain.")
ENDRULE

RULE logAbstractConfidentialityHandler.handleRequest.endExchange
CLASS io.undertow.security.handlers.AbstractConfidentialityHandler
METHOD handleRequest(HttpServerExchange)
AT INVOKE io.undertow.server.HttpServerExchange.endExchange() 1
IF true
DO log($CLASS, "DEBUG", "(Method handleRequest) Request is not 'sufficiently' confidential, ending exchange with code: " + $1.getResponseCode())
ENDRULE

RULE logServletConfidentialityConstraintHandler.handleRequest.next
CLASS io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler
METHOD handleRequest(HttpServerExchange)
AT INVOKE handleRequest(HttpServerExchange) 1
IF true
DO log($CLASS, "DEBUG", "(Method handleRequest) TransportGuaranteeType was determined as: " + 
		$transportGuarantee + ", continuing in handlers chain by calling super.handleRequest(HttpServerExchange exchange).")
ENDRULE

RULE logServletConfidentialityConstraintHandler.handleRequest.sendError
CLASS io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler
METHOD handleRequest(HttpServerExchange)
AT INVOKE javax.servlet.http.HttpServletResponse.sendError(int) 1
IF true
DO log($CLASS, "DEBUG", "(Method handleRequest) TransportGuaranteeType is REJECTED, " + 
		"sending an error response to the client with status SC_FORBIDDEN(403)")
ENDRULE

RULE logAuthenticationMechanismsHandler.handleRequest.addMechanism
CLASS io.undertow.security.handlers.AuthenticationMechanismsHandler
METHOD handleRequest(HttpServerExchange)
AT INVOKE io.undertow.security.api.SecurityContext.addAuthenticationMechanism(AuthenticationMechanism) ALL
IF true
DO log($CLASS, "DEBUG", "(Method handleRequest) Adding authentication mechanism [" + $mechanism + "] to the security context.")
ENDRULE

RULE logAuthenticationMechanismsHandler.handleRequest.next
CLASS io.undertow.security.handlers.AuthenticationMechanismsHandler
METHOD handleRequest(HttpServerExchange)
AT INVOKE handleRequest(HttpServerExchange) 1
IF true
DO log($CLASS, "DEBUG", "(Method handleRequest) Added authentication mechanisms if any existed, continuing in handlers chain.")
ENDRULE

RULE logCachedAuthenticatedSessionHandler.handleRequest.setAuthenticatedSessionManager
CLASS io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler
METHOD handleRequest(HttpServerExchange)
AT INVOKE handleRequest(HttpServerExchange) 1
IF $session != null
DO log($CLASS, "DEBUG", "(Method handleRequest) HttpSession exists, putting AuthenticatedSessionManager to the exchange and continuing in handlers chain.")
ENDRULE

RULE logCachedAuthenticatedSessionHandler.handleRequest.next
CLASS io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler
METHOD handleRequest(HttpServerExchange)
AT INVOKE handleRequest(HttpServerExchange) 1
IF $session == null
DO log($CLASS, "DEBUG", "(Method handleRequest) AuthenticatedSessionManager was not set because HttpSession does not exist, continuing in handlers chain.")
ENDRULE

RULE logSecurityInitialHandler.handleRequest.next
CLASS io.undertow.security.handlers.SecurityInitialHandler
METHOD handleRequest(HttpServerExchange)
AT INVOKE handleRequest(HttpServerExchange) 1
IF true
DO log($CLASS, "DEBUG", "(Method handleRequest) Creating security context:\n Authentication mode: " + $0.authenticationMode +
		", Identity manager: " + $0.identityManager + ", ProgramaticMechName: " + $0.programaticMechName)
ENDRULE

RULE logJACCContextIdHandler.handleRequest.next
CLASS org.wildfly.extension.undertow.security.jacc.JACCContextIdHandler
METHOD handleRequest(HttpServerExchange)
AT INVOKE handleRequest(HttpServerExchange) 1
IF true
DO log($CLASS, "DEBUG", "(Method handleRequest) Checking previously registered contextId and suspending it" +
		" for the duration of the request. Previous contextId = " + $previousContextID)
ENDRULE

RULE logServletInitialHandler.handleFirstRequest.setup
CLASS io.undertow.servlet.handlers.ServletInitialHandler
METHOD handleFirstRequest(HttpServerExchange, ServletChain, ServletRequestContext, ServletRequest, ServletResponse)
AT INVOKE io.undertow.servlet.core.CompositeThreadSetupAction.setup(HttpServerExchange) 1
IF true
DO log($CLASS, "DEBUG", "(Method handleFirstRequest) Setting up thread local context for the exchange.")
ENDRULE

RULE logServletInitialHandler.handleFirstRequest.setCurrentRequestContext
CLASS io.undertow.servlet.handlers.ServletInitialHandler
METHOD handleFirstRequest(HttpServerExchange, ServletChain, ServletRequestContext, ServletRequest, ServletResponse)
AT INVOKE io.undertow.servlet.handlers.SecurityActions.setCurrentRequestContext(ServletRequestContext) 1
IF true
DO log($CLASS, "DEBUG", "(Method handleFirstRequest) Storing current request context in the current thread's copy of the thread-local variable.")
ENDRULE

RULE logServletInitialHandler.handleFirstRequest.next
CLASS io.undertow.servlet.handlers.ServletInitialHandler
METHOD handleFirstRequest(HttpServerExchange, ServletChain, ServletRequestContext, ServletRequest, ServletResponse)
AT INVOKE handleRequest(HttpServerExchange) 1
IF true
DO log($CLASS, "DEBUG", "(Method handleFirstRequest) First request has been successfully initialized, continuing in handlers chain.")
ENDRULE

RULE logServletInitialHandler.dispatchRequest.handleFirstRequest
CLASS io.undertow.servlet.handlers.ServletInitialHandler
METHOD dispatchRequest(HttpServerExchange, ServletRequestContext, ServletChain, DispatcherType)
AT INVOKE handleFirstRequest(HttpServerExchange, ServletChain, ServletRequestContext, ServletRequest, ServletResponse) 1
IF true
DO log($CLASS, "DEBUG", "(Method dispatchRequest) DispatcherType is REQUEST or ASYNC, handling request as the first request.")
ENDRULE

RULE logServletInitialHandler.dispatchRequest.next
CLASS io.undertow.servlet.handlers.ServletInitialHandler
METHOD dispatchRequest(HttpServerExchange, ServletRequestContext, ServletChain, DispatcherType)
AT INVOKE handleRequest(HttpServerExchange) 1
IF true
DO log($CLASS, "DEBUG", "(Method dispatchRequest) DispatcherType is not REQUEST or ASYNC, continuing in handlers chain.")
ENDRULE

RULE logServletInitialHandler.handleRequest.forbiddenPath
CLASS io.undertow.servlet.handlers.ServletInitialHandler
METHOD handleRequest(HttpServerExchange)
AT INVOKE io.undertow.server.HttpServerExchange.setResponseCode(int) 1
IF true
DO log($CLASS, "DEBUG", "(Method handleRequest) Path: " + $path + " is forbidden, setting response code to 404 NOT_FOUND.")
ENDRULE

RULE logServletInitialHandler.handleRequest.redirect
CLASS io.undertow.servlet.handlers.ServletInitialHandler
METHOD handleRequest(HttpServerExchange)
AT INVOKE io.undertow.server.HttpServerExchange.setResponseCode(int) 2
IF true
DO log($CLASS, "DEBUG", "(Method handleRequest) Type is ServletPathMatch.Type.REDIRECT, the request is an upgrade request and it " + 
						"is not HTTP2 upgrade requests. Setting response code to 302 FOUND.")
ENDRULE

RULE logServletInitialHandler.handleRequest.rewrite
CLASS io.undertow.servlet.handlers.ServletInitialHandler
METHOD handleRequest(HttpServerExchange)
AT INVOKE io.undertow.server.HttpServerExchange.setRelativePath(String) 1
IF true
DO log($CLASS, "DEBUG", "(Method handleRequest) The path ends with a '/', type is ServletPathMatch.Type.REWRITE." + 
						" Adding rewrite location to relative path, request URI and request path of the exchange.")
ENDRULE

RULE logServletInitialHandler.handleRequest
CLASS io.undertow.servlet.handlers.ServletInitialHandler
METHOD handleRequest(HttpServerExchange)
AT ENTRY
IF true
DO log($CLASS, "DEBUG", "(Method handleRequest) Handling request by InitialServletHandler.handleRequest: Checking exchange and its executor and security manager.")
ENDRULE

RULE logConnectors.executeRootHandler.handleRequest
CLASS io.undertow.server.Connectors
METHOD executeRootHandler(HttpHandler, HttpServerExchange)
AT ENTRY
IF true
DO log($CLASS, "DEBUG", "(Method executeRootHandler) Executing root handler:" + $1)
ENDRULE

RULE logHttpServerExchange.dispatch
CLASS io.undertow.server.HttpServerExchange
METHOD dispatch(Executor, HttpHandler)
AT ENTRY
IF true
DO log($CLASS, "DEBUG", "(Method dispatch) Dispatching HttpServerExchange with following executor and handler: \n" + 
						"Executor = " + $1 + "; Handler = " + $2)
ENDRULE

#Logging info about JSP config
RULE logJSPConfig
CLASS org.wildfly.extension.undertow.JSPConfig
METHOD <init>
AT EXIT
IF true
DO log($CLASS, "DEBUG", "JSP configuration, initParams (null if jsp support is disabled ): " + $this.servletInfo.getInitParams())
ENDRULE