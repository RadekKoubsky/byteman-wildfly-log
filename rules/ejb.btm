HELPER org.jboss.byteman.koubsky.LogHelper

#------------ Beginning of rules for method ProxyInvocationHandler.invoke(Object, Method, Object[]) ------------

#Log ProxyInvocationHandler - entry
RULE logProxyInvocationHandler.invoke
CLASS org.jboss.as.ee.component.ProxyInvocationHandler
METHOD invoke(Object, Method, Object[])
AT ENTRY
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Processing a method invocation on a proxy instance:" + 
						"\nProxy instance: " + $proxy + "\nMethod: " + $method + "\nArguments: " + java.util.Arrays.toString($args))
ENDRULE

#Log ProxyInvocationHandler - process invocationS
RULE logProxyInvocationHandler.invoke.processInvocation
CLASS org.jboss.as.ee.component.ProxyInvocationHandler
METHOD invoke(Object, Method, Object[])
AT INVOKE org.jboss.invocation.Interceptor.processInvocation(InterceptorContext)
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Starting interceptor chain with given interceptor and context: " + 
						"\nInterceptor instance: " + $interceptor + "\nContext: " + $context)
ENDRULE

#------------ End of rules for method ProxyInvocationHandler.invoke(Object, Method, Object[]) ------------




#------------ Beginning of rules for method PrivilegedWithCombinerInterceptor.processInvocation(InterceptorContext) ------------

#Log PrivilegedWithCombinerInterceptor - do privileged with combiner
RULE logPrivilegedWithCombinerInterceptor.processInvocation.doPrivilegedWithCombiner
CLASS org.jboss.invocation.PrivilegedWithCombinerInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE java.security.AccessController.doPrivilegedWithCombiner(PrivilegedExceptionAction)
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Security manager is not null, performing interceptor context" + 
						" as an action with privileges enabled.Preserving the current AccessControlContext's " + 
						"DomainCombiner while the action is performed.")
ENDRULE

#Log PrivilegedWithCombinerInterceptor - passing invocation through the context
RULE logPrivilegedWithCombinerInterceptor.processInvocation.proceed
CLASS org.jboss.invocation.PrivilegedWithCombinerInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.invocation.InterceptorContext.run()
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Security manager is null, passing the invocation on to the next step in the chain.")
ENDRULE

#------------ End of rules for method PrivilegedWithCombinerInterceptor.processInvocation(InterceptorContext) ------------




#Log AccessCheckingInterceptor - passing invocation through the context
RULE logAccessCheckingInterceptor.processInvocation.proceed
CLASS org.jboss.invocation.AccessCheckingInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.wildfly.security.manager.WildFlySecurityManager.doChecked(PrivilegedExceptionAction)
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Performing interceptor context as an action with permission checking enabled by " + 
						"WildFlySecurityManager.")
ENDRULE




#------------ Beginning of rules for method ContextClassLoaderInterceptor.processInvocation(InterceptorContext) ------------

#Log ContextClassLoaderInterceptor - set context class loader
RULE logContextClassLoaderInterceptor.processInvocation.setClassloader
CLASS org.jboss.invocation.ContextClassLoaderInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.invocation.InterceptorContext.proceed()
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Setting thread context class loader for the duration of an invocation:" + 
						"\nOld classloader: " + $old + "\nCurrent classloader: " + $0.classLoader)
ENDRULE

#Log ContextClassLoaderInterceptor - passing invocation through the context
RULE logContextClassLoaderInterceptor.processInvocation.proceed
CLASS org.jboss.invocation.ContextClassLoaderInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.invocation.InterceptorContext.proceed()
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Passing the invocation on to the next step in the chain.")
ENDRULE

#------------ End of rules for method ContextClassLoaderInterceptor.processInvocation(InterceptorContext) ------------




#------------ Beginning of rules for method AdditionalSetupInterceptor.processInvocation(InterceptorContext) ------------

#Log AdditionalSetupInterceptor - setup action
RULE logAdditionalSetupInterceptor.processInvocation.setupAction
CLASS org.jboss.as.ejb3.component.interceptors.AdditionalSetupInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.as.server.deployment.SetupAction.setup(Map)
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Performing action which sets up the context, action: " + $action)
ENDRULE

#Log AdditionalSetupInterceptor - passing invocation through the context
RULE logAdditionalSetupInterceptor.processInvocation.proceed
CLASS org.jboss.as.ejb3.component.interceptors.AdditionalSetupInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.invocation.InterceptorContext.proceed()
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Passing the invocation on to the next step in the chain.")
ENDRULE

#Log AdditionalSetupInterceptor - tear down action
RULE logAdditionalSetupInterceptor.processInvocation.teardownAction
CLASS org.jboss.as.ejb3.component.interceptors.AdditionalSetupInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.as.server.deployment.SetupAction.teardown(Map) ALL
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Performing action which tears down the context, action: " + $@[0])
ENDRULE

#------------ End of rules for method AdditionalSetupInterceptor.processInvocation(InterceptorContext) ------------




#------------ Beginning of rules for method NamespaceContextInterceptor.processInvocation(InterceptorContext) ------------

#Log NamespaceContextInterceptor - push service name
RULE logNamespaceContextInterceptor.processInvocation.pushServiceName
CLASS org.jboss.as.ee.component.NamespaceContextInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.as.naming.WritableServiceBasedNamingStore.pushOwner(ServiceName) ALL
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Pushing service name onto WritableServiceBasedNamingStore thread local stack, " + 
						" service name: " + $0.deploymentUnitServiceName)
ENDRULE

#Log NamespaceContextInterceptor - passing invocation through the context
RULE logNamespaceContextInterceptor.processInvocation.proceed
CLASS org.jboss.as.ee.component.NamespaceContextInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.invocation.InterceptorContext.proceed()
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Passing the invocation on to the next step in the chain.")
ENDRULE

#Log NamespaceContextInterceptor - pop service name
RULE logNamespaceContextInterceptor.processInvocation.popServiceName
CLASS org.jboss.as.ee.component.NamespaceContextInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.as.naming.WritableServiceBasedNamingStore.popOwner() ALL
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Popping service name off the WritableServiceBasedNamingStore thread local stack, " + 
						"service name: " + $0.deploymentUnitServiceName)
ENDRULE

#------------ End of rules for method NamespaceContextInterceptor.processInvocation(InterceptorContext) ------------

#Log WaitTimeInterceptor - passing invocation through the context
RULE logWaitTimeInterceptor.processInvocation.proceed
CLASS org.jboss.as.ejb3.component.invocationmetrics.WaitTimeInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.invocation.InterceptorContext.proceed()
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Putting start wait time private data to interceptor context, private data: WaitTimeInterceptor.START_WAIT_TIME: " 
						+ $context.getPrivateData(org.jboss.as.ejb3.component.invocationmetrics.WaitTimeInterceptor.START_WAIT_TIME) + 
						" (milliseconds)")
ENDRULE

#------------ Beginning of rules for method SecurityContextInterceptor.processInvocation(InterceptorContext) ------------

#Log SecurityContextInterceptor - entry
RULE logSecurityContextInterceptor.processInvocation.entry
CLASS org.jboss.as.ejb3.security.SecurityContextInterceptor
METHOD processInvocation(InterceptorContext)
AT ENTRY
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Checking privileges for privileged actions, push action: " + $0.pushAction + 
						", pop action: " + $0.popAction)
ENDRULE

#Log SecurityContextInterceptor - checking permissions
RULE logSecurityContextInterceptor.processInvocation.checkPermissions
CLASS org.jboss.as.ejb3.security.SecurityContextInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.wildfly.security.manager.WildFlySecurityManager.isChecking() ALL
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Security manager is checking permissions, performing privileged action" + 
						" with all of the permissions possessed by the caller's protection domain.")
ENDRULE

#Log SecurityContextInterceptor - passing invocation through the context
RULE logSecurityContextInterceptor.processInvocation.proceed
CLASS org.jboss.as.ejb3.security.SecurityContextInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.invocation.InterceptorContext.proceed()
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Passing the invocation on to the next step in the chain.")
ENDRULE

#Log SecurityContextInterceptor - run action
RULE logSecurityContextInterceptor.processInvocation.runAction
CLASS org.jboss.as.ejb3.security.SecurityContextInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE java.security.PrivilegedAction.run() ALL
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Security manager has already checked permissions, performing computation for privileged action directly.")
ENDRULE

#------------ End of rules for method CurrentInvocationContextInterceptor.processInvocation(InterceptorContext) ------------




#------------ Beginning of rules for method CurrentInvocationContextInterceptor.processInvocation(InterceptorContext) ------------

#Log CurrentInvocationContextInterceptor - push context
RULE logCurrentInvocationContextInterceptor.processInvocation.pushContext
CLASS org.jboss.as.ejb3.component.interceptors.CurrentInvocationContextInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.as.ejb3.context.CurrentInvocationContext.push(InterceptorContext)
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Pushing current interceptor context onto thread local stack, context: " + $context)
ENDRULE

#Log CurrentInvocationContextInterceptor - passing invocation through the context
RULE logCurrentInvocationContextInterceptor.processInvocation.proceed
CLASS org.jboss.as.ejb3.component.interceptors.CurrentInvocationContextInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.invocation.InterceptorContext.proceed()
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Passing the invocation on to the next step in the chain.")
ENDRULE

#Log CurrentInvocationContextInterceptor - pop context
RULE logCurrentInvocationContextInterceptor.processInvocation.pop
CLASS org.jboss.as.ejb3.component.interceptors.CurrentInvocationContextInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.as.ejb3.context.CurrentInvocationContext.pop() ALL
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Popping current interceptor context off the thread local stack.")
ENDRULE

#------------ End of rules for method CurrentInvocationContextInterceptor.processInvocation(InterceptorContext) ------------




#------------ Beginning of rules for class org.jboss.as.ejb3.tx.CMTTxInterceptor ------------

#Log CMTTxInterceptor - process invocation
RULE logCMTTxInterceptor.processInvocation
CLASS org.jboss.as.ejb3.tx.CMTTxInterceptor
METHOD processInvocation(InterceptorContext)
AFTER WRITE $timeoutInSeconds
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Trying to invoke transaction of an EJBComponent according to transaction attribute," + 
						"\nEJBComponent: " + $component + "\nTransactionAttributeType: " +
						  $attr + "\nTransaction timeout in seconds: " + $timeoutInSeconds)
						
ENDRULE

#Log CMTTxInterceptor - invoke in our tx
RULE logCMTTxInterceptor.invokeInOurTx
CLASS org.jboss.as.ejb3.tx.CMTTxInterceptor
METHOD invokeInOurTx(InterceptorContext, TransactionManager, EJBComponent)
AT ENTRY
IF true
DO log($CLASS, "DEBUG", "(Method invokeInOurTx) Invoking in our transaction using transaction manager: " + $tm)
ENDRULE

#Log CMTTxInterceptor - begin transaction
RULE logCMTTxInterceptor.invokeInOurTx.beginTransaction
CLASS org.jboss.as.ejb3.tx.CMTTxInterceptor
METHOD invokeInOurTx(InterceptorContext, TransactionManager, EJBComponent)
AT INVOKE javax.transaction.TransactionManager.begin()
IF true
DO log($CLASS, "DEBUG", "(Method invokeInOurTx) Starting a new transaction, and associating it with the calling thread.")
ENDRULE

#Log CMTTxInterceptor - get transaction
RULE logCMTTxInterceptor.invokeInOurTx.getTransaction
CLASS org.jboss.as.ejb3.tx.CMTTxInterceptor
METHOD invokeInOurTx(InterceptorContext, TransactionManager, EJBComponent)
AFTER WRITE $tx
IF true
DO log($CLASS, "DEBUG", "(Method invokeInOurTx) Getting transaction from transaction manager, transaction: " + $tx)
ENDRULE

#Log CMTTxInterceptor - passing invocation through the context
RULE logCMTTxInterceptor.invokeInOurTx.proceed
CLASS org.jboss.as.ejb3.tx.CMTTxInterceptor
METHOD invokeInOurTx(InterceptorContext, TransactionManager, EJBComponent)
AT INVOKE org.jboss.invocation.InterceptorContext.proceed()
IF true
DO log($CLASS, "DEBUG", "(Method invokeInOurTx) Passing the invocation on to the next step in the chain.")
ENDRULE

#Log CMTTxInterceptor - end transaction
RULE logCMTTxInterceptor.endTransaction.endTransaction
CLASS org.jboss.as.ejb3.tx.CMTTxInterceptor
METHOD endTransaction(TransactionManager, Transaction)
AFTER WRITE $txStatus
IF true
DO log($CLASS, "DEBUG", "(Method endTransaction) Ending transaction, status: " + $txStatus)
ENDRULE

#Log CMTTxInterceptor - commit transaction
RULE logCMTTxInterceptor.endTransaction.commit
CLASS org.jboss.as.ejb3.tx.CMTTxInterceptor
METHOD endTransaction(TransactionManager, Transaction)
AT INVOKE javax.transaction.TransactionManager.commit()
IF true
DO log($CLASS, "DEBUG", "(Method endTransaction) Committing the transaction associated with the calling thread.")
ENDRULE

#Log CMTTxInterceptor - invoke in caller transaction
RULE logCMTTxInterceptor.invokeInCallerTx
CLASS org.jboss.as.ejb3.tx.CMTTxInterceptor
METHOD invokeInCallerTx(InterceptorContext, Transaction, final EJBComponent)
AT ENTRY
IF true
DO log($CLASS, "DEBUG", "(Method invokeInCallerTx) Invoking in caller transaction, passing the invocation on to the next step in the chain.")
ENDRULE

#Log CMTTxInterceptor - invoke in no transaction
RULE logCMTTxInterceptor.invokeInNoTx
CLASS org.jboss.as.ejb3.tx.CMTTxInterceptor
METHOD invokeInNoTx(InterceptorContext, EJBComponent)
AT ENTRY
IF true
DO log($CLASS, "DEBUG", "(Method invokeInNoTx) Invoking in no transaction, passing the invocation on to the next step in the chain.")
ENDRULE

#------------ End of rules for class org.jboss.as.ejb3.tx.CMTTxInterceptor ------------




#------------ Beginning of rules for method ComponentDispatcherInterceptor.processInvocation(InterceptorContext) ------------

#Log ComponentDispatcherInterceptor - get component instance from context
RULE logComponentDispatcherInterceptor.processInvocation.getComponentInstance
CLASS org.jboss.as.ee.component.interceptors.ComponentDispatcherInterceptor
METHOD processInvocation(InterceptorContext)
AT ENTRY
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Getting component instance from interceptor context.")
ENDRULE

#Log ComponentDispatcherInterceptor - component instance not null
RULE logComponentDispatcherInterceptor.processInvocation.componentInstanceNotNull
CLASS org.jboss.as.ee.component.interceptors.ComponentDispatcherInterceptor
METHOD processInvocation(InterceptorContext)
AFTER WRITE $componentInstance
IF $componentInstance != null
DO log($CLASS, "DEBUG", "(Method processInvocation) Component instance: " + $componentInstance + 
						" is not null, setting method and target to the interpcetor context.")
ENDRULE

#Log ComponentDispatcherInterceptor - get old method
RULE logComponentDispatcherInterceptor.processInvocation.getOldMethod
CLASS org.jboss.as.ee.component.interceptors.ComponentDispatcherInterceptor
METHOD processInvocation(InterceptorContext)
AFTER WRITE $oldMethod
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Getting old method from context, old method: " + $oldMethod)
ENDRULE

#Log ComponentDispatcherInterceptor - set current method
RULE logComponentDispatcherInterceptor.processInvocation.setCurrentMethod
CLASS org.jboss.as.ee.component.interceptors.ComponentDispatcherInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.invocation.InterceptorContext.setMethod(Method) 1
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Setting current component method to the context, current method: " + $0.componentMethod)
ENDRULE

#Log ComponentDispatcherInterceptor - set target instance
RULE logComponentDispatcherInterceptor.processInvocation.setTarget
CLASS org.jboss.as.ee.component.interceptors.ComponentDispatcherInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.invocation.InterceptorContext.setTarget(Object)
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Setting target instance of the component instance class, instance: " + $componentInstance.getInstance())
ENDRULE

#Log ComponentDispatcherInterceptor - process invocation
RULE logComponentDispatcherInterceptor.processInvocation.processInvocation
CLASS org.jboss.as.ee.component.interceptors.ComponentDispatcherInterceptor
METHOD processInvocation(InterceptorContext)
AFTER INVOKE org.jboss.invocation.InterceptorContext.setTarget(Object)
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Current method and target instance has been set, " + 
						"passing the invocation on to the next step in the chain.")
ENDRULE

#------------ End of rules for method ComponentDispatcherInterceptor.processInvocation(InterceptorContext) ------------




#------------ Beginning of rules for method ChainedInterceptor.processInvocation(InterceptorContext) ------------

#Log ChainedInterceptor - set current interceptors
RULE logChainedInterceptor.processInvocation.setCurrentInterceptors
CLASS org.jboss.invocation.ChainedInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.invocation.InterceptorContext.setInterceptors(List)
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Setting current interceptors to the context, interceptors: " + $0.interceptors)
ENDRULE

#Log ChainedInterceptor - passing invocation through the context
RULE logChainedInterceptor.processInvocation.proceed
CLASS org.jboss.invocation.ChainedInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.invocation.InterceptorContext.proceed()
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Passing the invocation on to the next step in the chain.")
ENDRULE

#Log ChainedInterceptor - set old interceptors
RULE logChainedInterceptor.processInvocation.setOldInterceptors
CLASS org.jboss.invocation.ChainedInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.invocation.InterceptorContext.setInterceptors(List,int) ALL
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Setting old interceptors to the context with a starting index to proceed from.\n" + 
						"Index: " + $oldNext + "\n" + "Old interceptors : " + $old)
ENDRULE

#------------ End of rules for method ChainedInterceptor.processInvocation(InterceptorContext) ------------

#Log InitialInterceptor - passing invocation through the context
RULE logInitialInterceptor.processInvocation.proceed
CLASS org.jboss.invocation.InitialInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.invocation.InterceptorContext.proceed()
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Passing the invocation on to the next step in the chain.")
ENDRULE

#------------ Beginning of rules for method ConcurrentContextInterceptor.processInvocation(InterceptorContext) ------------

#Log ConcurrentContextInterceptor - push context
RULE logConcurrentContextInterceptor.processInvocation.pushContext
CLASS org.jboss.as.ee.concurrent.ConcurrentContextInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.as.ee.concurrent.ConcurrentContext.pushCurrent(ConcurrentContext)
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Pushing concurrent context onto thread local stack in the current thread.")
ENDRULE

#Log ConcurrentContextInterceptor - passing invocation through the context
RULE logConcurrentContextInterceptor.processInvocation.proceed
CLASS org.jboss.as.ee.concurrent.ConcurrentContextInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.invocation.InterceptorContext.proceed()
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Passing the invocation on to the next step in the chain.")
ENDRULE

#Log ConcurrentContextInterceptor - pop context
RULE logConcurrentContextInterceptor.processInvocation.popContext
CLASS org.jboss.as.ee.concurrent.ConcurrentContextInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.as.ee.concurrent.ConcurrentContext.popCurrent()
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Popping the concurrent context in the current thread off the thread local stack.")
ENDRULE

#------------ End of rules for method ConcurrentContextInterceptor.processInvocation(InterceptorContext) ------------




#------------ Beginning of rules for AbstractEJBRequestScopeActivationInterceptor and EjbRequestScopeActivationInterceptor classes ------------

#Log EjbRequestScopeActivationInterceptor - call invoke on abstract parent
RULE logAbstractEJBRequestScopeActivationInterceptor.processInvocation
CLASS org.jboss.as.weld.ejb.EjbRequestScopeActivationInterceptor
METHOD processInvocation(InterceptorContext)
AT ENTRY
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Calling method aroundInvoke(InvocationContext) from " + 
						"parent class AbstractEJBRequestScopeActivationInterceptor.")
ENDRULE

#Log AbstractEJBRequestScopeActivationInterceptor - request context is active
RULE logAbstractEJBRequestScopeActivationInterceptor.aroundInvoke.requestContextActive
CLASS org.jboss.weld.ejb.AbstractEJBRequestScopeActivationInterceptor
METHOD aroundInvoke(InvocationContext)
AFTER INVOKE org.jboss.weld.ejb.AbstractEJBRequestScopeActivationInterceptor.isRequestContextActive()
IF $0.isRequestContextActive()
DO log($CLASS, "DEBUG", "(Method aroundInvoke) Request context is active, proceeding with the next stage of invocation processing.")
ENDRULE

#Log AbstractEJBRequestScopeActivationInterceptor - request context is not active
RULE logAbstractEJBRequestScopeActivationInterceptor.aroundInvoke.requestContextNotActive
CLASS org.jboss.weld.ejb.AbstractEJBRequestScopeActivationInterceptor
METHOD aroundInvoke(InvocationContext)
AFTER INVOKE org.jboss.weld.ejb.AbstractEJBRequestScopeActivationInterceptor.isRequestContextActive()
IF !$0.isRequestContextActive()
DO log($CLASS, "DEBUG", "(Method aroundInvoke) Request context is not active, performing activation process...")
ENDRULE

#Log AbstractEJBRequestScopeActivationInterceptor - associate request context
RULE logAbstractEJBRequestScopeActivationInterceptor.aroundInvoke.associtateContext
CLASS org.jboss.weld.ejb.AbstractEJBRequestScopeActivationInterceptor
METHOD aroundInvoke(InvocationContext)
AT INVOKE associate
IF true
DO log($CLASS, "DEBUG", "(Method aroundInvoke) Associating the request context with the storage, storage instance: " + $invocation)
ENDRULE

#Log AbstractEJBRequestScopeActivationInterceptor - activate request context
RULE logAbstractEJBRequestScopeActivationInterceptor.aroundInvoke.activateContext
CLASS org.jboss.weld.ejb.AbstractEJBRequestScopeActivationInterceptor
METHOD aroundInvoke(InvocationContext)
AT INVOKE activate
IF true
DO log($CLASS, "DEBUG", "(Method aroundInvoke) Activating request context.")
ENDRULE

#Log AbstractEJBRequestScopeActivationInterceptor - proceeding with the next stage after activation
RULE logAbstractEJBRequestScopeActivationInterceptor.aroundInvoke.proceedAfterActivation
CLASS org.jboss.weld.ejb.AbstractEJBRequestScopeActivationInterceptor
METHOD aroundInvoke(InvocationContext)
AT INVOKE javax.interceptor.InvocationContext.proceed() 2
IF true
DO log($CLASS, "DEBUG", "(Method aroundInvoke) Created an event with qualifier @Initialized(RequestScoped.class) " + 
						"which is fired when the request context is initialized. Proceeding with the next stage of invocation processing...")
ENDRULE

#Log AbstractEJBRequestScopeActivationInterceptor - invalidate request context
RULE logAbstractEJBRequestScopeActivationInterceptor.aroundInvoke.invalidateContext
CLASS org.jboss.weld.ejb.AbstractEJBRequestScopeActivationInterceptor
METHOD aroundInvoke(InvocationContext)
AT INVOKE invalidate ALL
IF true
DO log($CLASS, "DEBUG", "(Method aroundInvoke) Invalidating the request context as due for destruction when deactivate is called.")
ENDRULE

#Log AbstractEJBRequestScopeActivationInterceptor - deactivate request context
RULE logAbstractEJBRequestScopeActivationInterceptor.aroundInvoke.deactivateContext
CLASS org.jboss.weld.ejb.AbstractEJBRequestScopeActivationInterceptor
METHOD aroundInvoke(InvocationContext)
AT INVOKE deactivate ALL
IF true
DO log($CLASS, "DEBUG", "(Method aroundInvoke) Deactivating the request context, destroying any instances if the context is invalid.")
ENDRULE

#Log AbstractEJBRequestScopeActivationInterceptor - dissociate request context
RULE logAbstractEJBRequestScopeActivationInterceptor.aroundInvoke.dissociateContext
CLASS org.jboss.weld.ejb.AbstractEJBRequestScopeActivationInterceptor
METHOD aroundInvoke(InvocationContext)
AT INVOKE dissociate ALL
IF true
DO log($CLASS, "DEBUG", "(Method aroundInvoke) Dissociating the request context from the storage, storage instance: " + $invocation + 
						". Creating an event with qualifier @Destroyed(RequestScoped.class) which is fired when the request context is destroyed.")
ENDRULE

#------------ End of rules for method AbstractEJBRequestScopeActivationInterceptor.aroundInvoke(InvocationContext) ------------




#------------ Beginning of rules for method StatefulSessionSynchronizationInterceptor.processInvocation(InterceptorContext) ------------

#Log StatefulSessionSynchronizationInterceptor - start synchronization
RULE logStatefulSessionSynchronizationInterceptor.processInvocation.startSynchronization
CLASS org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor
METHOD processInvocation(InterceptorContext)
AFTER WRITE $instance
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Start synchronization of stateful session component instance: " + $instance)
ENDRULE

#Log StatefulSessionSynchronizationInterceptor - getting lock
RULE logStatefulSessionSynchronizationInterceptor.processInvocation.getLock
CLASS org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor
METHOD processInvocation(InterceptorContext)
AFTER WRITE $lock
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Getting lock from stateful session component instance, lock: " + $lock)
ENDRULE

#Log StatefulSessionSynchronizationInterceptor - getting threadLock
RULE logStatefulSessionSynchronizationInterceptor.processInvocation.getThreadLock
CLASS org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor
METHOD processInvocation(InterceptorContext)
AFTER WRITE $threadLock
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Getting thread lock from stateful session component instance, thread lock: " + $threadLock)
ENDRULE

#Log StatefulSessionSynchronizationInterceptor - pushing lock owner
RULE logStatefulSessionSynchronizationInterceptor.processInvocation.pushOwner
CLASS org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.as.ejb3.tx.OwnableReentrantLock.pushOwner(Object)
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Pushing lock owner to lock, lock owner: " + 
						($lockOwner != null ? ($lockOwner.getClass().getName() + ", instance: " + $lockOwner) : "null"))
ENDRULE

#Log StatefulSessionSynchronizationInterceptor - trying to acquire a lock
RULE logStatefulSessionSynchronizationInterceptor.processInvocation.tryAcquire
CLASS org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.as.ejb3.tx.OwnableReentrantLock.tryLock(long, TimeUnit)
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Trying to acquire the lock within given time, time: " + $timeout.getValue() + "; unit: " + 
						$timeout.getTimeUnit())
ENDRULE

#Log StatefulSessionSynchronizationInterceptor - lock acquired
RULE logStatefulSessionSynchronizationInterceptor.processInvocation.lockAcquired
CLASS org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor
METHOD processInvocation(InterceptorContext)
AFTER WRITE $acquired
IF $acquired
DO log($CLASS, "DEBUG", "(Method processInvocation) The lock is acquired, entering synchronized block with thread lock as monitor object.")
ENDRULE

#Log StatefulSessionSynchronizationInterceptor - synchronization is not registered
RULE logStatefulSessionSynchronizationInterceptor.processInvocation.syncNotRegistered
CLASS org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor
METHOD processInvocation(InterceptorContext)
AFTER INVOKE org.jboss.as.ejb3.component.stateful.StatefulSessionComponentInstance.isSynchronizationRegistered() 1
IF !$instance.isSynchronizationRegistered()
DO log($CLASS, "DEBUG", "(Method processInvocation) Synchronization is not registered, trying to register synchronization for transaction key.")
ENDRULE

#Log StatefulSessionSynchronizationInterceptor - getting transaction key
RULE logStatefulSessionSynchronizationInterceptor.processInvocation.getTransactionKey
CLASS org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor
METHOD processInvocation(InterceptorContext)
AFTER WRITE $currentTransactionKey 2
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Getting current transaction key, key: " + $currentTransactionKey)
ENDRULE

#Log StatefulSessionSynchronizationInterceptor - getting status
RULE logStatefulSessionSynchronizationInterceptor.processInvocation.getStatus
CLASS org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor
METHOD processInvocation(InterceptorContext)
AFTER WRITE $status
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Getting the transaction status of the current thread, status: " + $status)
ENDRULE

#Log StatefulSessionSynchronizationInterceptor - after begin callback
RULE logStatefulSessionSynchronizationInterceptor.processInvocation.afterBegin
CLASS org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.as.ejb3.component.stateful.StatefulSessionComponentInstance.afterBegin()
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Invoking the afterBegin callback on the stateful session component instance.")
ENDRULE

#Log StatefulSessionSynchronizationInterceptor - set synchronization registered
RULE logStatefulSessionSynchronizationInterceptor.processInvocation.setSynchronizationRegistered
CLASS org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.as.ejb3.component.stateful.StatefulSessionComponentInstance.setSynchronizationRegistered(boolean)
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Setting synchronization registered of the stateful session component instance to value: true")
ENDRULE

#Log StatefulSessionSynchronizationInterceptor - put private data after sycnhronozation was set
RULE logStatefulSessionSynchronizationInterceptor.processInvocation.putPrivateData
CLASS org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor
METHOD processInvocation(InterceptorContext)
AFTER INVOKE org.jboss.invocation.InterceptorContext.putPrivateData(Class, Object) 1
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Synchronization is now registered, putting private data to interceptor context:\n" + 
						"Type: " + "StatefulTransactionMarker.class" + "\n" + 
						"Created instance with firstInvocation = true, instance: " + org.jboss.as.ejb3.component.stateful.StatefulTransactionMarker.of(true))
ENDRULE

#Log StatefulSessionSynchronizationInterceptor - synchronization is registered
RULE logStatefulSessionSynchronizationInterceptor.processInvocation.syncIsRegistered
CLASS org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor
METHOD processInvocation(InterceptorContext)
AFTER INVOKE org.jboss.as.ejb3.component.stateful.StatefulSessionComponentInstance.isSynchronizationRegistered() 1
IF $instance.isSynchronizationRegistered()
DO log($CLASS, "DEBUG", "(Method processInvocation) Synchronization is registered, putting private data to interceptor context:\n" + 
						"Type: " + "StatefulTransactionMarker.class" + "\n" + 
						"Created instance with firstInvocation = false, instance: " + org.jboss.as.ejb3.component.stateful.StatefulTransactionMarker.of(false))
ENDRULE

#Log StatefulSessionSynchronizationInterceptor - passing invocation through the context
RULE logStatefulSessionSynchronizationInterceptor.processInvocation.proceed
CLASS org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.invocation.InterceptorContext.proceed()
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Passing the invocation on to the next step in the chain.")
ENDRULE

#Log StatefulSessionSynchronizationInterceptor - release instance
RULE logStatefulSessionSynchronizationInterceptor.processInvocation.releaseInstance
CLASS org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor.releaseInstance(StatefulSessionComponentInstance) ALL
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Synchronization was not set in this call, explicitly releasing stateful session component instance.")
ENDRULE

#Log StatefulSessionSynchronizationInterceptor - release lock
RULE logStatefulSessionSynchronizationInterceptor.processInvocation.releaseLock
CLASS org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor.releaseLock(StatefulSessionComponentInstance) ALL
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Releasing the lock, held by this thread, on the stateful session component instance: " + $instance)
ENDRULE

#Log StatefulSessionSynchronizationInterceptor - release cache
RULE logStatefulSessionSynchronizationInterceptor.processInvocation.releaseCache
CLASS org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.as.ejb3.cache.Cache.release ALL
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Call the cache release of the stateful session component instance to decrease the usage count.")
ENDRULE

#Log StatefulSessionSynchronizationInterceptor - pop lock owner
RULE logStatefulSessionSynchronizationInterceptor.processInvocation.popOwner
CLASS org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.as.ejb3.tx.OwnableReentrantLock.popOwner()
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Popping lock owner off the lock.")
ENDRULE
 
#------------ End of rules for method StatefulSessionSynchronizationInterceptor.processInvocation(InterceptorContext) ------------




#----------------------------- Beginning of rules for classes SFSB/SBInvocationInterceptor) --------------------------------------

#Log SFSBInvocationInterceptor - getting entity manager reference
RULE logSFSBInvocationInterceptor.processInvocation.getEntityManagerReference
CLASS org.jboss.as.jpa.interceptor.SFSBInvocationInterceptor
METHOD processInvocation(InterceptorContext)
AFTER WRITE $entityManagerRef
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Trying to get entity manager reference, result: " + $entityManagerRef)
ENDRULE

#Log SFSBInvocationInterceptor - push call
RULE logSFSBInvocationInterceptor.processInvocation.pushCall
CLASS org.jboss.as.jpa.interceptor.SFSBInvocationInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.as.jpa.container.SFSBCallStack.pushCall(Map)
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Entity manager reference is not null, pushing the passed SFSB context handle onto the "
						 + "invocation call stack, using  following entity manager map: " + $entityManagers)
ENDRULE

#Log SFSBInvocationInterceptor - passing invocation through the context
RULE logSFSBInvocationInterceptor.processInvocation.proceed
CLASS org.jboss.as.jpa.interceptor.SFSBInvocationInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.invocation.InterceptorContext.proceed()
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Passing the invocation on to the next step in the chain.")
ENDRULE

#Log SFSBInvocationInterceptor - pop call
RULE logSFSBInvocationInterceptor.processInvocation.popCall
CLASS org.jboss.as.jpa.interceptor.SFSBInvocationInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.as.jpa.container.SFSBCallStack.popCall() ALL
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Popping the current SFSB invocation off the invocation call stack.")
ENDRULE

#Log SBInvocationInterceptor - push call
RULE logSBInvocationInterceptor.processInvocation.pushCall
CLASS org.jboss.as.jpa.interceptor.SBInvocationInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.as.jpa.container.NonTxEmCloser.pushCall()
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Entered new session bean invocation, starting new " +
						"collection for tracking transactional entity managers created without a JTA transaction.")
ENDRULE

#Log SBInvocationInterceptor - passing invocation through the context
RULE logSBInvocationInterceptor.processInvocation.proceed
CLASS org.jboss.as.jpa.interceptor.SBInvocationInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.invocation.InterceptorContext.proceed()
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Passing the invocation on to the next step in the chain.")
ENDRULE

#Log SBInvocationInterceptor - pop call
RULE logSBInvocationInterceptor.processInvocation.popCall
CLASS org.jboss.as.jpa.interceptor.SBInvocationInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.as.jpa.container.NonTxEmCloser.popCall() ALL
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Current session bean invocation is ending, closing any transactional" + 
						" entity managers created without a JTA transaction.")
ENDRULE

#----------------------------- End of rules for classes SFSB/SBInvocationInterceptor) --------------------------------------





#Log ExecutionTimeInterceptor - passing invocation through the context
RULE logExecutionTimeInterceptor.processInvocation.proceed
CLASS org.jboss.as.ejb3.component.invocationmetrics.ExecutionTimeInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.as.ejb3.component.EJBComponent.isStatisticsEnabled()
IF !$component.isStatisticsEnabled()
DO log($CLASS, "DEBUG", "(Method processInvocation) Enable statistics is false, passing the invocation on to the next step in the chain.")
ENDRULE






#----------------------------- Beginning of rules for class Jsr299BindingsInterceptor --------------------------------------

#Log Jsr299BindingsInterceptor - process invocation
RULE logJsr299BindingsInterceptor.processInvocation
CLASS org.jboss.as.weld.ejb.Jsr299BindingsInterceptor
METHOD processInvocation(InterceptorContext)
AFTER WRITE $interceptorBindings
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Processing invocation, getting interceptor instances and bindings:\n" + 
						"InterceptorContext: " + $context + "\ninterceptionType: " + $0.interceptionType + 
						"\ninterceptorInstances: " + ($interceptorInstances == null ? "null" : $interceptorInstances.interceptorInstances) +
						"\n" + "interceptorBindings - all interceptors: " + ($interceptorBindings == null ? "null" : $interceptorBindings.getAllInterceptors()))
ENDRULE

#Log Jsr299BindingsInterceptor method interception
RULE logJsr299BindingsInterceptor.doMethodInterception
CLASS org.jboss.as.weld.ejb.Jsr299BindingsInterceptor
METHOD doMethodInterception(InvocationContext, InterceptionType, WeldInterceptorInstances, InterceptorBindings)
AT ENTRY
IF true
DO log($CLASS, "DEBUG", "(Method doMethodInterception) Intercepting method with following parameters:\n" + 
						"invocationContext: " + $invocationContext + "\ninterceptionType: " + $interceptionType +
						"\n" + "interceptorBindings: " + $interceptorBindings)
ENDRULE

#Log Jsr299BindingsInterceptor method interception - proceeding of interception
RULE logJsr299BindingsInterceptor.doMethodInterception.proceed
CLASS org.jboss.as.weld.ejb.Jsr299BindingsInterceptor
METHOD doMethodInterception(InvocationContext, InterceptionType, WeldInterceptorInstances, InterceptorBindings)
AT INVOKE javax.interceptor.InvocationContext.proceed()
IF true
DO log($CLASS, "DEBUG", "(Method doMethodInterception) Interceptor bindings == null, proceeding with the next stage of invocation processing.")
ENDRULE

#Log Jsr299BindingsInterceptor method interception - delegating interception
RULE logJsr299BindingsInterceptor.doMethodInterception.delegateInterseption
CLASS org.jboss.as.weld.ejb.Jsr299BindingsInterceptor
METHOD doMethodInterception(InvocationContext, InterceptionType, WeldInterceptorInstances, InterceptorBindings)
AT INVOKE org.jboss.as.weld.ejb.Jsr299BindingsInterceptor.delegateInterception(InvocationContext, InterceptionType, List, WeldInterceptorInstances)
IF true
DO log($CLASS, "DEBUG", "(Method doMethodInterception) Interceptor bindings != null, delegating interception for current method interceptors: " + $currentInterceptors)
ENDRULE

#Log Jsr299BindingsInterceptor delegate interception - getting current interceptor instances
RULE logJsr299BindingsInterceptor.delegateInterseption.getCurrentInstances
CLASS org.jboss.as.weld.ejb.Jsr299BindingsInterceptor
METHOD delegateInterception(InvocationContext, InterceptionType, List, WeldInterceptorInstances)
AT ENTRY
IF true
DO log($CLASS, "DEBUG", "(Method delegateInterception) Trying to get current interceptor instances.")
ENDRULE

#Log Jsr299BindingsInterceptor delegate interception - proceeding by DelegatingInterceptorInvocationContext
RULE logJsr299BindingsInterceptor.delegateInterseption.proceedDelegatingInterceptorInvocationContext
CLASS org.jboss.as.weld.ejb.Jsr299BindingsInterceptor
METHOD delegateInterception(InvocationContext, InterceptionType, List, WeldInterceptorInstances)
AT INVOKE org.jboss.as.weld.ejb.DelegatingInterceptorInvocationContext.<init>
IF true
DO log($CLASS, "DEBUG", "(Method delegateInterception) Current interceptor instances exist: "+ $currentInterceptorInstances + 
						", creating DelegatingInterceptorInvocationContext and " +
						"proceeding with the next stage of invocation processing.")
ENDRULE

#Log Jsr299BindingsInterceptor delegate interception - proceeding by InvocationContext
RULE logJsr299BindingsInterceptor.delegateInterseption.proceedInvocationContext
CLASS org.jboss.as.weld.ejb.Jsr299BindingsInterceptor
METHOD delegateInterception(InvocationContext, InterceptionType, List, WeldInterceptorInstances)
AT INVOKE javax.interceptor.InvocationContext.proceed()
IF true
DO log($CLASS, "DEBUG", "(Method delegateInterception) Current interceptor instances do not exist, using InvocationContext" +
						" to proceed with the next stage of invocation processing.")
ENDRULE

#Log Jsr299BindingsInterceptor lifecycle interception
RULE logJsr299BindingsInterceptor.doLifecycleInterception
CLASS org.jboss.as.weld.ejb.Jsr299BindingsInterceptor
METHOD doLifecycleInterception(InterceptorContext, WeldInterceptorInstances, InterceptorBindings)
AT ENTRY
IF true
DO log($CLASS, "DEBUG", "(Method doLifecycleInterception) Lifecycle interception with following parameters:\n" + 
						"InterceptorContext: " + $context + "\n" + "interceptorBindings: " + $interceptorBindings)
ENDRULE

#Log Jsr299BindingsInterceptor lifecycle interception - proceeding of interception
RULE logJsr299BindingsInterceptor.doLifecycleInterception.proceed
CLASS org.jboss.as.weld.ejb.Jsr299BindingsInterceptor
METHOD doLifecycleInterception(InvocationContext, InterceptionType, WeldInterceptorInstances, InterceptorBindings)
AT INVOKE javax.interceptor.InvocationContext.proceed()
IF true
DO log($CLASS, "DEBUG", "(Method doLifecycleInterception) Interceptor bindings == null, proceeding with the next stage of invocation processing.")
ENDRULE

#Log Jsr299BindingsInterceptor lifecycle interception - delegating interception
RULE logJsr299BindingsInterceptor.doLifecycleInterception.delegateInterseption
CLASS org.jboss.as.weld.ejb.Jsr299BindingsInterceptor
METHOD doLifecycleInterception(InvocationContext, InterceptionType, WeldInterceptorInstances, InterceptorBindings)
AT INVOKE org.jboss.as.weld.ejb.Jsr299BindingsInterceptor.delegateInterception(InvocationContext, InterceptionType, List, WeldInterceptorInstances)
IF true
DO log($CLASS, "DEBUG", "(Method doLifecycleInterception) Interceptor bindings != null, delegating interception for current lifecycle interceptors: " 
						+ $currentInterceptors)
ENDRULE

#----------------------------- End of rules for class Jsr299BindingsInterceptor --------------------------------------






#Log beginning of interceptor creation process
RULE logUserInterceptorFactory.create
CLASS org.jboss.as.ee.component.interceptors.UserInterceptorFactory
METHOD create(InterceptorFactoryContext)
AT ENTRY
IF true
DO log($CLASS, "DEBUG", "(Method create) Begin creation process of a new interceptor...")
ENDRULE

#Log creating around invoke interceptor
RULE logUserInterceptorFactory.create.aroundInvoke
CLASS org.jboss.as.ee.component.interceptors.UserInterceptorFactory
METHOD create(InterceptorFactoryContext)
AFTER WRITE $aroundInvoke
IF true
DO log($CLASS, "DEBUG", "(Method create) Created around_invoke interceptor: " + $aroundInvoke)
ENDRULE

#Log creating around timeout interceptor
RULE logUserInterceptorFactory.create.aroundTimeout
CLASS org.jboss.as.ee.component.interceptors.UserInterceptorFactory
METHOD create(InterceptorFactoryContext)
AFTER WRITE $aroundTimeout
IF $aroundTimeout == null
DO log($CLASS, "DEBUG", "(Method create) Around timeout interceptor factory is null, assigning null to around_timeout interceptor.")
ENDRULE

#Log null around timeout interceptor
RULE logUserInterceptorFactory.create.nullAroundTimeout
CLASS org.jboss.as.ee.component.interceptors.UserInterceptorFactory
METHOD create(InterceptorFactoryContext)
AFTER WRITE $aroundTimeout
IF $aroundTimeout != null
DO log($CLASS, "DEBUG", "(Method create) Created around_timeout interceptor: " + $aroundTimeout)
ENDRULE

#Log construction of new interceptor
RULE logUserInterceptorFactory.create.new
CLASS org.jboss.as.ee.component.interceptors.UserInterceptorFactory
METHOD create(InterceptorFactoryContext)
AT EXIT
IF true
DO log($CLASS, "DEBUG", "(Method create) Constructing new interceptor instance with around invoke and around timeout invocations.")
ENDRULE

#Log setting current interceptors
RULE logWeavedInterceptor.processInvocation.setCurrentInterceptors
CLASS org.jboss.invocation.WeavedInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.invocation.InterceptorContext.setInterceptors(List)
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Setting current interceptors to the context:\nOld interceptors: " + $old +
						"\n\nCurrent interceptors: " + $interceptors)
ENDRULE

#Log WeavedInterceptor - passing invocation through the context
RULE logWeavedInterceptor.processInvocation.proceed
CLASS org.jboss.invocation.WeavedInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.invocation.InterceptorContext.proceed()
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Passing the invocation on to the next step in the chain.")
ENDRULE

#Log ManagedReferenceMethodInterceptor method invocation
RULE logManagedReferenceMethodInterceptor.processInvocation.invoke
CLASS org.jboss.as.ee.component.ManagedReferenceMethodInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE java.lang.reflect.Method.invoke(Object, Object[])
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Invoking intercepted method of an EJB instance.\nInterceptor: " + $0 
						+ "\nInstance: " + $instance + "\nMethod: " + $0.method + "\nParameters values: " 
						+ java.util.Arrays.toString($context.getParameters()))
ENDRULE