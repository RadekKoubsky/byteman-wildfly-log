HELPER org.jboss.byteman.koubsky.LogHelper

#Log StatefulSessionSynchronizationInterceptor - start synchronization
RULE logStatefulSessionSynchronizationInterceptor.processInvocation.startSynchronization
CLASS org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor
METHOD processInvocation(InterceptorContext)
AFTER WRITE $instance
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Start synchronization of stateful session bean instance: " + $instance)
ENDRULE

#Log StatefulSessionSynchronizationInterceptor - getting lock
RULE logStatefulSessionSynchronizationInterceptor.processInvocation.getLock
CLASS org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor
METHOD processInvocation(InterceptorContext)
AFTER WRITE $lock
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Getting lock from bean instance, lock: " + $lock)
ENDRULE

#Log StatefulSessionSynchronizationInterceptor - getting threadLock
RULE logStatefulSessionSynchronizationInterceptor.processInvocation.getThreadLock
CLASS org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor
METHOD processInvocation(InterceptorContext)
AFTER WRITE $threadLock
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Getting thread lock from bean instance, thread lock: " + $threadLock)
ENDRULE

#Log StatefulSessionSynchronizationInterceptor - pushing lock owner
RULE logStatefulSessionSynchronizationInterceptor.processInvocation.pushOwner
CLASS org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.as.ejb3.tx.OwnableReentrantLock.pushOwner(Object)
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Pushing lock owner to lock, lock owner: " + 
						($lockOwner != null ? ($lockOwner.getClass().getName() + ", instance: " + $lockOwner) : "null"))
ENDRULE

#Log StatefulSessionSynchronizationInterceptor - trying to acquire a lock
RULE logStatefulSessionSynchronizationInterceptor.processInvocation.tryAcquire
CLASS org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor
METHOD processInvocation(InterceptorContext)
AFTER WRITE $acquired
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Trying to acquire the lock within given time, time: " + $timeout.getValue() + "; unit: " + 
						$timeout.getTimeUnit())
ENDRULE

#Log StatefulSessionSynchronizationInterceptor - lock acquired
RULE logStatefulSessionSynchronizationInterceptor.processInvocation.lockAcquired
CLASS org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor
METHOD processInvocation(InterceptorContext)
AFTER WRITE $acquired
IF $acquired
DO log($CLASS, "DEBUG", "(Method processInvocation) The lock is acquired, entering synchronized block with thread lock as monitor object.")
ENDRULE

#Log StatefulSessionSynchronizationInterceptor - synchronization is not registered
RULE logStatefulSessionSynchronizationInterceptor.processInvocation.syncNotRegistered
CLASS org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor
METHOD processInvocation(InterceptorContext)
AFTER INVOKE org.jboss.as.ejb3.component.stateful.StatefulSessionComponentInstance.isSynchronizationRegistered()
IF !$instance.isSynchronizationRegistered()
DO log($CLASS, "DEBUG", "(Method processInvocation) Synchronization is not registered, trying to register synchronization for transaction key.")
ENDRULE

#Log StatefulSessionSynchronizationInterceptor - synchronization is registered
RULE logStatefulSessionSynchronizationInterceptor.processInvocation.syncIsRegistered
CLASS org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor
METHOD processInvocation(InterceptorContext)
AFTER INVOKE org.jboss.as.ejb3.component.stateful.StatefulSessionComponentInstance.isSynchronizationRegistered()
IF $instance.isSynchronizationRegistered()
DO log($CLASS, "DEBUG", "(Method processInvocation) Synchronization is registered, putting private data to interceptor context:\n" + 
						"Type: " + "StatefulTransactionMarker.class" + "\n" + 
						org.jboss.as.ejb3.component.stateful.StatefulTransactionMarker.of(false))
ENDRULE












#Log StatefulSessionSynchronizationInterceptor - pop lock owner
RULE logStatefulSessionSynchronizationInterceptor.processInvocation.popOwner
CLASS org.jboss.as.ejb3.component.stateful.StatefulSessionSynchronizationInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.as.ejb3.tx.OwnableReentrantLock.popOwner()
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Popping lock owner from lock.")
ENDRULE

#Log SFSBInvocationInterceptor - getting entity manager reference
RULE logSFSBInvocationInterceptor.processInvocation.getEntityManagerReference
CLASS org.jboss.as.jpa.interceptor.SFSBInvocationInterceptor
METHOD processInvocation(InterceptorContext)
AFTER WRITE $entityManagerRef
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Trying to get entity manager reference, result: " + $entityManagerRef)
ENDRULE

#Log SFSBInvocationInterceptor - push call
RULE logSFSBInvocationInterceptor.processInvocation.pushCall
CLASS org.jboss.as.jpa.interceptor.SFSBInvocationInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.as.jpa.container.SFSBCallStack.pushCall(Map)
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Entity manager reference is not null, pushing the passed SFSB context handle onto the "
						 + "invocation call stack, using  following entity manager map: " + $entityManagers)
ENDRULE

#Log SFSBInvocationInterceptor - passing invocation through the context
RULE logSFSBInvocationInterceptor.processInvocation.proceed
CLASS org.jboss.as.jpa.interceptor.SFSBInvocationInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.invocation.InterceptorContext.proceed()
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Passing the invocation on to the next step in the chain.")
ENDRULE

#Log SFSBInvocationInterceptor - pop call
RULE logSFSBInvocationInterceptor.processInvocation.popCall
CLASS org.jboss.as.jpa.interceptor.SFSBInvocationInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.as.jpa.container.SFSBCallStack.popCall() ALL
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Popping the current SFSB invocation off the invocation call stack.")
ENDRULE

#Log SBInvocationInterceptor - push call
RULE logSBInvocationInterceptor.processInvocation.pushCall
CLASS org.jboss.as.jpa.interceptor.SBInvocationInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.as.jpa.container.NonTxEmCloser.pushCall()
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Entered new session bean invocation, starting new " +
						"collection for tracking transactional entity managers created without a JTA transaction.")
ENDRULE

#Log SBInvocationInterceptor - passing invocation through the context
RULE logSBInvocationInterceptor.processInvocation.proceed
CLASS org.jboss.as.jpa.interceptor.SBInvocationInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.invocation.InterceptorContext.proceed()
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Passing the invocation on to the next step in the chain.")
ENDRULE

#Log SBInvocationInterceptor - pop call
RULE logSBInvocationInterceptor.processInvocation.popCall
CLASS org.jboss.as.jpa.interceptor.SBInvocationInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.as.jpa.container.NonTxEmCloser.popCall() ALL
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Current session bean invocation is ending, closing any transactional" + 
						" entity managers created without a JTA transaction.")
ENDRULE

#Log ExecutionTimeInterceptor - passing invocation through the context
RULE logExecutionTimeInterceptor.processInvocation.proceed
CLASS org.jboss.as.ejb3.component.invocationmetrics.ExecutionTimeInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.as.ejb3.component.EJBComponent.isStatisticsEnabled()
IF !$component.isStatisticsEnabled()
DO log($CLASS, "DEBUG", "(Method processInvocation) Enable statistics is false, passing the invocation on to the next step in the chain.")
ENDRULE

#Log Jsr299BindingsInterceptor - process invocation
RULE logJsr299BindingsInterceptor.processInvocation
CLASS org.jboss.as.weld.ejb.Jsr299BindingsInterceptor
METHOD processInvocation(InterceptorContext)
AT LINE 91
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Processing invocation, getting interceptor instances and bindings:\n" + 
						"InterceptorContext: " + $context + "\ninterceptionType: " + $0.interceptionType + 
						"\ninterceptorInstances: " + ($interceptorInstances == null ? "null" : $interceptorInstances.interceptorInstances) +
						"\n" + "interceptorBindings - all interceptors: " + ($interceptorBindings == null ? "null" : $interceptorBindings.getAllInterceptors()))
ENDRULE

#Log Jsr299BindingsInterceptor method interception
RULE logJsr299BindingsInterceptor.doMethodInterception
CLASS org.jboss.as.weld.ejb.Jsr299BindingsInterceptor
METHOD doMethodInterception(InvocationContext, InterceptionType, WeldInterceptorInstances, InterceptorBindings)
AT ENTRY
IF true
DO log($CLASS, "DEBUG", "(Method doMethodInterception) Intercepting method with following parameters:\n" + 
						"invocationContext: " + $invocationContext + "\ninterceptionType: " + $interceptionType +
						"\n" + "interceptorBindings: " + $interceptorBindings)
ENDRULE

#Log Jsr299BindingsInterceptor method interception - proceeding of interception
RULE logJsr299BindingsInterceptor.doMethodInterception.proceed
CLASS org.jboss.as.weld.ejb.Jsr299BindingsInterceptor
METHOD doMethodInterception(InvocationContext, InterceptionType, WeldInterceptorInstances, InterceptorBindings)
AT INVOKE javax.interceptor.InvocationContext.proceed()
IF true
DO log($CLASS, "DEBUG", "(Method doMethodInterception) Interceptor bindings == null, proceeding with the next stage of invocation processing.")
ENDRULE

#Log Jsr299BindingsInterceptor method interception - delegating interception
RULE logJsr299BindingsInterceptor.doMethodInterception.delegateInterseption
CLASS org.jboss.as.weld.ejb.Jsr299BindingsInterceptor
METHOD doMethodInterception(InvocationContext, InterceptionType, WeldInterceptorInstances, InterceptorBindings)
AT INVOKE org.jboss.as.weld.ejb.Jsr299BindingsInterceptor.delegateInterception(InvocationContext, InterceptionType, List, WeldInterceptorInstances)
IF true
DO log($CLASS, "DEBUG", "(Method doMethodInterception) Interceptor bindings != null, delegating interception for current method interceptors: " + $currentInterceptors)
ENDRULE

#Log Jsr299BindingsInterceptor delegate interception - getting current interceptor instances
RULE logJsr299BindingsInterceptor.delegateInterseption.getCurrentInstances
CLASS org.jboss.as.weld.ejb.Jsr299BindingsInterceptor
METHOD delegateInterception(InvocationContext, InterceptionType, List, WeldInterceptorInstances)
AT ENTRY
IF true
DO log($CLASS, "DEBUG", "(Method delegateInterception) Trying to get current interceptor instances.")
ENDRULE

#Log Jsr299BindingsInterceptor delegate interception - proceeding by DelegatingInterceptorInvocationContext
RULE logJsr299BindingsInterceptor.delegateInterseption.proceedDelegatingInterceptorInvocationContext
CLASS org.jboss.as.weld.ejb.Jsr299BindingsInterceptor
METHOD delegateInterception(InvocationContext, InterceptionType, List, WeldInterceptorInstances)
AT INVOKE org.jboss.as.weld.ejb.DelegatingInterceptorInvocationContext.<init>
IF true
DO log($CLASS, "DEBUG", "(Method delegateInterception) Current interceptor instances exist: "+ $currentInterceptorInstances + 
						", creating DelegatingInterceptorInvocationContext and " +
						"proceeding with the next stage of invocation processing.")
ENDRULE

#Log Jsr299BindingsInterceptor delegate interception - proceeding by InvocationContext
RULE logJsr299BindingsInterceptor.delegateInterseption.proceedInvocationContext
CLASS org.jboss.as.weld.ejb.Jsr299BindingsInterceptor
METHOD delegateInterception(InvocationContext, InterceptionType, List, WeldInterceptorInstances)
AT INVOKE javax.interceptor.InvocationContext.proceed()
IF true
DO log($CLASS, "DEBUG", "(Method delegateInterception) Current interceptor instances do not exist, using InvocationContext" +
						" to proceed with the next stage of invocation processing.")
ENDRULE

#Log Jsr299BindingsInterceptor lifecycle interception
RULE logJsr299BindingsInterceptor.doLifecycleInterception
CLASS org.jboss.as.weld.ejb.Jsr299BindingsInterceptor
METHOD doLifecycleInterception(InterceptorContext, WeldInterceptorInstances, InterceptorBindings)
AT ENTRY
IF true
DO log($CLASS, "DEBUG", "(Method doLifecycleInterception) Lifecycle interception with following parameters:\n" + 
						"InterceptorContext: " + $context + "\n" + "interceptorBindings: " + $interceptorBindings)
ENDRULE

#Log Jsr299BindingsInterceptor lifecycle interception - proceeding of interception
RULE logJsr299BindingsInterceptor.doLifecycleInterception.proceed
CLASS org.jboss.as.weld.ejb.Jsr299BindingsInterceptor
METHOD doLifecycleInterception(InvocationContext, InterceptionType, WeldInterceptorInstances, InterceptorBindings)
AT INVOKE javax.interceptor.InvocationContext.proceed()
IF true
DO log($CLASS, "DEBUG", "(Method doLifecycleInterception) Interceptor bindings == null, proceeding with the next stage of invocation processing.")
ENDRULE

#Log Jsr299BindingsInterceptor lifecycle interception - delegating interception
RULE logJsr299BindingsInterceptor.doLifecycleInterception.delegateInterseption
CLASS org.jboss.as.weld.ejb.Jsr299BindingsInterceptor
METHOD doLifecycleInterception(InvocationContext, InterceptionType, WeldInterceptorInstances, InterceptorBindings)
AT INVOKE org.jboss.as.weld.ejb.Jsr299BindingsInterceptor.delegateInterception(InvocationContext, InterceptionType, List, WeldInterceptorInstances)
IF true
DO log($CLASS, "DEBUG", "(Method doLifecycleInterception) Interceptor bindings != null, delegating interception for current lifecycle interceptors: " 
						+ $currentInterceptors)
ENDRULE

#Log beginning of interceptor creation process
RULE logUserInterceptorFactory.create
CLASS org.jboss.as.ee.component.interceptors.UserInterceptorFactory
METHOD create(InterceptorFactoryContext)
AT ENTRY
IF true
DO log($CLASS, "DEBUG", "(Method create) Begin creation process of a new interceptor...")
ENDRULE

#Log creating around invoke interceptor
RULE logUserInterceptorFactory.create.aroundInvoke
CLASS org.jboss.as.ee.component.interceptors.UserInterceptorFactory
METHOD create(InterceptorFactoryContext)
AFTER WRITE $aroundInvoke
IF true
DO log($CLASS, "DEBUG", "(Method create) Created around_invoke interceptor: " + $aroundInvoke)
ENDRULE

#Log creating around timeout interceptor
RULE logUserInterceptorFactory.create.aroundTimeout
CLASS org.jboss.as.ee.component.interceptors.UserInterceptorFactory
METHOD create(InterceptorFactoryContext)
AFTER WRITE $aroundTimeout
IF $aroundTimeout == null
DO log($CLASS, "DEBUG", "(Method create) Around timeout interceptor factory is null, assigning null to around_timeout interceptor.")
ENDRULE

#Log null around timeout interceptor
RULE logUserInterceptorFactory.create.nullAroundTimeout
CLASS org.jboss.as.ee.component.interceptors.UserInterceptorFactory
METHOD create(InterceptorFactoryContext)
AFTER WRITE $aroundTimeout
IF $aroundTimeout != null
DO log($CLASS, "DEBUG", "(Method create) Created around_timeout interceptor: " + $aroundTimeout)
ENDRULE

#Log construction of new interceptor
RULE logUserInterceptorFactory.create.new
CLASS org.jboss.as.ee.component.interceptors.UserInterceptorFactory
METHOD create(InterceptorFactoryContext)
AT EXIT
IF true
DO log($CLASS, "DEBUG", "(Method create) Constructing new interceptor instance with around invoke and around timeout invocations.")
ENDRULE

#Log setting current interceptors
RULE logWeavedInterceptor.processInvocation.setCurrentInterceptors
CLASS org.jboss.invocation.WeavedInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.invocation.InterceptorContext.setInterceptors(List)
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Setting current interceptors to the context:\nOld interceptors: " + $old +
						"\n\nCurrent interceptors: " + $interceptors)
ENDRULE

#Log WeavedInterceptor - passing invocation through the context
RULE logWeavedInterceptor.processInvocation.proceed
CLASS org.jboss.invocation.WeavedInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE org.jboss.invocation.InterceptorContext.proceed()
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Passing the invocation on to the next step in the chain.")
ENDRULE

#Log ManagedReferenceMethodInterceptor method invocation
RULE logManagedReferenceMethodInterceptor.processInvocation.invoke
CLASS org.jboss.as.ee.component.ManagedReferenceMethodInterceptor
METHOD processInvocation(InterceptorContext)
AT INVOKE java.lang.reflect.Method.invoke(Object, Object[])
IF true
DO log($CLASS, "DEBUG", "(Method processInvocation) Invoking intercepted method of an EJB instance.\nInterceptor: " + $0 
						+ "\nInstance: " + $instance + "\nMethod: " + $0.method + "\nParameters values: " 
						+ java.util.Arrays.toString($context.getParameters()))
ENDRULE